[alias]
    clone-org = "!f() { \
        url=\"$1\"; \
        org_repo=$(echo \"$url\" | sed -E \"s|.*[:/]([^/]+/[^/]+).*|\\1|\" | sed \"s/\\.git$//\"); \
        org=$(dirname \"$org_repo\"); \
        mkdir -p \"$org\" && git clone \"$url\" \"$org_repo\" \"${@:2}\"; \
        echo \"Cloned to: $org_repo\"; \
    }; f"
    
    # AI-generated commit message with editor
    aicommit = "!f() { \
        temp_file=$(mktemp); \
        gemini -y -a -p \"Analyze the staged git changes using 'git diff --staged' and recent commit history with 'git log --oneline -10' to understand the codebase patterns. Generate a commit message following these guidelines:\n\n1. Use conventional commit format: type(scope): description\n2. Types: feat, fix, refactor, docs, style, test, chore, perf, ci\n3. Subject line: imperative mood, 50 chars max, no period\n4. If changes are complex, add a body explaining WHY and WHAT\n5. Focus on business logic and functionality, not just file changes\n6. Group related changes in bullet points if needed\n7. Match the style and tone of recent commits\n\nAnalyze what the code changes accomplish rather than just listing modified files.\" > \"$temp_file\"; \
        git commit -e -F \"$temp_file\"; \
        rm \"$temp_file\"; \
    }; f"
    
    # Short aliases
    co = clone-org
    ac = aicommit

[user]
	name = Ashik R.
	email = ashik.se@proton.me

[url "git@github.com:"]
    insteadOf = https://github.com/
    # Use SSH instead of HTTPS for GitHub (if you have SSH keys set up)

[core]
    editor = nvim
    # Use Neovim as default editor
    
    autocrlf = input
    # Linux/Mac: input | Windows: true
    # Handles line ending differences between OS
    
    excludesfile = ~/.gitignore_global
    # Global gitignore for OS/editor specific files
    
    pager = less -FRX
    # Better pager settings for git log/diff output
    
    whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol
    # Highlight whitespace issues

[init]
    defaultBranch = main
    # Use 'main' instead of 'master' for new repos

[push]
    default = simple
    # Only push current branch to its upstream
    
    autoSetupRemote = true
    # Automatically set up remote tracking for new branches

[pull]
    rebase = true
    # Use rebase instead of merge for pulls (cleaner history)
    
    ff = only
    # Only allow fast-forward pulls

[fetch]
    prune = true
    # Automatically remove deleted remote branches

[branch]
    autosetupmerge = always
    # Automatically set up tracking for new branches
    
    autosetuprebase = always
    # Use rebase for new branches by default

[rebase]
    autosquash = true
    # Automatically handle fixup!/squash! commits
    
    autostash = true
    # Automatically stash/unstash during rebase

[merge]
    tool = nvimdiff
    # Use Neovim's built-in diff for merge conflicts
    
    conflictstyle = diff3
    # Show common ancestor in merge conflicts

[mergetool]
    prompt = false
    # Don't prompt before opening merge tool
    
    keepBackup = false
    # Don't keep .orig files after merge

[mergetool "nvimdiff"]
    cmd = nvim -d $LOCAL $REMOTE $MERGED -c '$wincmd w' -c 'wincmd J'
    # Open nvim in diff mode with 3-way layout

[diff]
    tool = nvimdiff
    # Use Neovim for diffs
    
    algorithm = patience
    # Better diff algorithm for cleaner output
    
    renames = copies
    # Detect renames and copies

[difftool]
    prompt = false
    # Don't prompt before opening diff tool

[difftool "nvimdiff"]
    cmd = nvim -d $LOCAL $REMOTE
    # Simple 2-way diff in Neovim

[color]
    ui = auto
    # Colorize output when appropriate

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red
    new = green

[color "status"]
    added = yellow
    changed = green
    untracked = cyan

[log]
    date = relative
    # Show relative dates (2 days ago vs 2023-01-01)

[status]
    showUntrackedFiles = all
    # Show all untracked files, not just directories

[commit]
    verbose = true
    # Show diff in commit message editor
    
    gpgsign = false
    # Set to true if you want to sign commits

[rerere]
    enabled = true
    # Remember and reuse merge conflict resolutions

[help]
    autocorrect = 1
    # Auto-correct typos after 1 second
