#!/bin/bash

# Gemini-generated commit message script
# This script collects staged changes and recent logs, then feeds them to gemini

# Parse arguments
custom_date=""
while [[ $# -gt 0 ]]; do
    case $1 in
        --date=*)
            custom_date="${1#*=}"
            shift
            ;;
        --date)
            custom_date="$2"
            shift 2
            ;;
        *)
            echo "Unknown option: $1"
            echo "Usage: gemmit [--date=YYYY-MM-DDTHH:MM:SS]"
            exit 1
            ;;
    esac
done

# Check if there are staged changes
if git diff --staged --quiet; then
    echo "Error: No staged changes to commit. Use 'git add' to stage changes first."
    exit 1
fi

# Get staged changes
staged_changes=$(git diff --staged -- . \
  ':(exclude)pnpm-lock.yaml' \
  ':(exclude)package-lock.json' \
  ':(exclude)yarn.lock' \
  ':(exclude)bun.lockb' \
  ':(exclude)poetry.lock' \
  ':(exclude)Pipfile.lock' \
  ':(exclude)go.sum' \
  ':(exclude)Cargo.lock' \
  ':(exclude)composer.lock' \
  ':(exclude)dist/' \
  ':(exclude)build/' \
  ':(exclude)node_modules/' \
  ':(exclude)target/' \
  ':(exclude)__pycache__/' \
  ':(exclude).venv/'
)

# Create temporary file for commit message
temp_file=$(mktemp)

# Prepare the prompt with embedded data
prompt="You are a git commit message generator. Here are the staged git changes and recent commit history:

STAGED CHANGES:
$staged_changes

Generate ONLY the commit message following these guidelines:

1. Use conventional commit format: type(scope): description
2. Types: feat, fix, refactor, docs, style, test, chore, perf, ci
3. Subject line: imperative mood, 50 chars max, no period
4. If changes are complex, add a body explaining WHY and WHAT
5. Focus on business logic and functionality, not just file changes
6. Group related changes in bullet points if needed

IMPORTANT: Return ONLY the commit message. Do not include any prefix like 'Here is your commit message:' or wrap it in backticks. Just return the raw commit message text."

# Call gemini with the prepared prompt and save to temp file
gemini -m "gemini-2.5-flash" -p "$prompt" > "$temp_file"

# Set environment variables for custom date if provided
if [[ -n "$custom_date" ]]; then
    export GIT_AUTHOR_DATE="$custom_date"
    export GIT_COMMITTER_DATE="$custom_date"
fi

# Open git commit editor with the generated message
git commit -e -F "$temp_file"

# Clean up
rm "$temp_file"
