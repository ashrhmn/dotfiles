#!/usr/bin/env bash
set -euo pipefail

SCRIPT_NAME=$(basename "$0")

usage() {
  cat <<EOF
Usage: ${SCRIPT_NAME} [COMMAND] [OPTIONS] -- user@host [ssh options]

Commands:
  (default)           Establish SSH tunnel (attach mode)
  ps                  List all SPF processes (running/stopped)
  start NAME          Start a stopped process
  stop NAME|ID        Stop a running process (preserves config)
  rm NAME|ID          Remove a stopped process completely
  kill                Kill all SPF connections
  logs NAME|ID        Show logs for a process (use -f to follow)

Options:
  -P SSH_PORT           SSH port on remote host (default: 22)
  -L REMOTE_CSV         Comma-separated ports or ranges to forward REMOTE‚ÜíLOCAL
  -R LOCAL_CSV          Comma-separated ports or ranges to forward LOCAL‚ÜíREMOTE
                          (At least one of -L or -R is required)
  --name NAME           Name for this connection (runs in background if specified)
  --retry RETRIES       Number of connection retries on failure (default: 3)
  --delay DELAY         Delay in seconds between retries (default: 5)
  -f                    Follow logs (for logs command only)
  --                    End of script options; the first arg after -- must be user@host,
                          the rest are passed to ssh
  -h, --help            Show this help and exit

Port Forwarding Types:
  -L (Local/Remote‚ÜíLocal):  Forwards remote ports to your local machine
                           Example: -L 3000 makes remote:3000 available at localhost:3000
                           ‚ö†Ô∏è  Checks for local port conflicts
  
  -R (Remote/Local‚ÜíRemote): Forwards your local ports to remote machine  
                           Example: -R 5432 makes localhost:5432 available at remote:5432
                           ‚ÑπÔ∏è  No local port conflict checking needed

Examples:
  # Forward remote 3000‚Äì3005 ‚Üí your localhost (attached):
  ${SCRIPT_NAME} -L 3000-3005 -- ash@192.168.68.63

  # Forward local 5432,6379 ‚Üí remote (background with name):
  ${SCRIPT_NAME} --name myapp -R 5432,6379 -- ash@192.168.68.63

  # List all processes:
  ${SCRIPT_NAME} ps

  # Stop a process (preserves config):
  ${SCRIPT_NAME} stop myapp

  # Start a stopped process:
  ${SCRIPT_NAME} start myapp

  # View logs for a process:
  ${SCRIPT_NAME} logs myapp
  ${SCRIPT_NAME} logs myapp -f  # follow logs

  # Remove a stopped process completely:
  ${SCRIPT_NAME} rm myapp

  # Kill all running SPF connections:
  ${SCRIPT_NAME} kill
EOF
}

# defaults
SSH_PORT=22
USER=""
HOST=""
REMOTE_CSV=""
LOCAL_CSV=""
EXTRA_SSH=()
RETRIES=3
DELAY=5
SSH_PID=""
CONNECTION_NAME=""
COMMAND=""
FOLLOW_LOGS=false

# SPF state directory
SPF_DIR="$HOME/.spf"
mkdir -p "$SPF_DIR"

# helper to expand CSV with numeric ranges
_expand_ports() {
  local csv=$1
  IFS=',' read -ra parts <<< "$csv"
  for part in "${parts[@]}"; do
    if [[ $part =~ ^([0-9]+)-([0-9]+)$ ]]; then
      local start=${BASH_REMATCH[1]}
      local end=${BASH_REMATCH[2]}
      if (( start > end )); then
        echo "Invalid range: $part" >&2
        exit 1
      fi
      for ((p = start; p <= end; p++)); do
        echo "$p"
      done
    else
      echo "$part"
    fi
  done
}

# cleanup function
cleanup() {
  local exit_code=$?
  if [[ -n "$SSH_PID" ]] && kill -0 "$SSH_PID" 2>/dev/null; then
    if [[ -z "$CONNECTION_NAME" ]]; then
      echo -e "\n‚ö†Ô∏è  Cleaning up SSH tunnel (PID: $SSH_PID)..."
    fi
    kill "$SSH_PID" 2>/dev/null || true
    wait "$SSH_PID" 2>/dev/null || true
  fi
  
  # Remove process info file if this was a named connection
  if [[ -n "$CONNECTION_NAME" ]]; then
    rm -f "$SPF_DIR/${CONNECTION_NAME}.json"
  fi
  
  if [[ -z "$CONNECTION_NAME" ]]; then
    if [[ $exit_code -eq 0 ]]; then
      echo "‚úÖ SSH tunnel terminated cleanly"
    else
      echo "‚ùå SSH tunnel terminated with error (exit code: $exit_code)"
    fi
  fi
  exit $exit_code
}

# signal handlers
trap cleanup EXIT
trap 'echo -e "\nüõë Interrupted by user"; exit 130' INT TERM

# SPF process management functions
write_process_info() {
  local name="$1"
  local pid="$2"
  local user="$3"
  local host="$4"
  local ssh_port="$5"
  local remote_csv="$6"
  local local_csv="$7"
  local log_file="$8"
  local status="$9"
  
  cat > "$SPF_DIR/${name}.json" <<EOF
{
  "name": "$name",
  "pid": $pid,
  "user": "$user",
  "host": "$host",
  "ssh_port": $ssh_port,
  "remote_csv": "$remote_csv",
  "local_csv": "$local_csv",
  "log_file": "$log_file",
  "status": "$status",
  "created": "$(date -Iseconds)"
}
EOF
}

read_process_info() {
  local name_or_pid="$1"
  local file=""
  
  # Try by name first
  if [[ -f "$SPF_DIR/${name_or_pid}.json" ]]; then
    file="$SPF_DIR/${name_or_pid}.json"
  else
    # Try by PID
    for f in "$SPF_DIR"/*.json; do
      [[ -f "$f" ]] || continue
      if grep -q "\"pid\": $name_or_pid" "$f" 2>/dev/null; then
        file="$f"
        break
      fi
    done
  fi
  
  [[ -n "$file" ]] && cat "$file"
}

cleanup_dead_processes() {
  for f in "$SPF_DIR"/*.json; do
    [[ -f "$f" ]] || continue
    local pid=$(grep '"pid"' "$f" | sed 's/.*: *\([0-9]*\).*/\1/')
    local status=$(grep '"status"' "$f" | sed 's/.*": *"\([^"]*\)".*/\1/')
    # Only remove processes that were running but are now dead
    # Keep stopped processes (they should be explicitly removed with 'rm')
    if [[ "$status" == "running" ]] && [[ -n "$pid" ]] && ! kill -0 "$pid" 2>/dev/null; then
      rm -f "$f"
    fi
  done
}

list_processes() {
  cleanup_dead_processes
  echo "NAME       PID    STATUS   TARGET              FORWARDS"
  echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ   ‚îÄ‚îÄ‚îÄ‚îÄ   ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ   ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ   ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
  
  local found=false
  for f in "$SPF_DIR"/*.json; do
    [[ -f "$f" ]] || continue
    found=true
    
    local name=$(grep '"name"' "$f" | sed 's/.*": *"\([^"]*\)".*/\1/')
    local pid=$(grep '"pid"' "$f" | sed 's/.*: *\([0-9]*\).*/\1/')
    local user=$(grep '"user"' "$f" | sed 's/.*": *"\([^"]*\)".*/\1/')
    local host=$(grep '"host"' "$f" | sed 's/.*": *"\([^"]*\)".*/\1/')
    local ssh_port=$(grep '"ssh_port"' "$f" | sed 's/.*: *\([0-9]*\).*/\1/')
    local remote_csv=$(grep '"remote_csv"' "$f" | sed 's/.*": *"\([^"]*\)".*/\1/')
    local local_csv=$(grep '"local_csv"' "$f" | sed 's/.*": *"\([^"]*\)".*/\1/')
    local saved_status=$(grep '"status"' "$f" | sed 's/.*": *"\([^"]*\)".*/\1/')
    
    local status="$saved_status"
    # For running processes, verify they're actually running
    if [[ "$saved_status" == "running" ]] && ! kill -0 "$pid" 2>/dev/null; then
      status="dead"
    fi
    
    local forwards=""
    [[ -n "$remote_csv" ]] && forwards+="L:$remote_csv "
    [[ -n "$local_csv" ]] && forwards+="R:$local_csv"
    
    # Show PID as "-" for stopped processes
    local display_pid="$pid"
    [[ "$status" == "stopped" ]] && display_pid="-"
    
    printf "%-10s %-6s %-8s %-19s %s\n" "$name" "$display_pid" "$status" "${user}@${host}:${ssh_port}" "$forwards"
  done
  
  if [[ "$found" == "false" ]]; then
    echo "No SPF processes found"
  fi
}

stop_process() {
  local name_or_pid="$1"
  local info=$(read_process_info "$name_or_pid")
  
  if [[ -z "$info" ]]; then
    echo "‚ùå Process '$name_or_pid' not found"
    exit 1
  fi
  
  local name=$(echo "$info" | grep '"name"' | sed 's/.*": *"\([^"]*\)".*/\1/')
  local pid=$(echo "$info" | grep '"pid"' | sed 's/.*: *\([0-9]*\).*/\1/')
  local status=$(echo "$info" | grep '"status"' | sed 's/.*": *"\([^"]*\)".*/\1/')
  
  if [[ "$status" == "stopped" ]]; then
    echo "‚ö†Ô∏è  Process '$name' is already stopped"
    exit 1
  fi
  
  if kill -0 "$pid" 2>/dev/null; then
    echo "üõë Stopping process '$name' (PID: $pid)..."
    kill "$pid" 2>/dev/null || true
    sleep 1
    if kill -0 "$pid" 2>/dev/null; then
      kill -9 "$pid" 2>/dev/null || true
    fi
  fi
  
  # Update status to stopped but keep the config
  local user=$(echo "$info" | grep '"user"' | sed 's/.*": *"\([^"]*\)".*/\1/')
  local host=$(echo "$info" | grep '"host"' | sed 's/.*": *"\([^"]*\)".*/\1/')
  local ssh_port=$(echo "$info" | grep '"ssh_port"' | sed 's/.*: *\([0-9]*\).*/\1/')
  local remote_csv=$(echo "$info" | grep '"remote_csv"' | sed 's/.*": *"\([^"]*\)".*/\1/')
  local local_csv=$(echo "$info" | grep '"local_csv"' | sed 's/.*": *"\([^"]*\)".*/\1/')
  local log_file=$(echo "$info" | grep '"log_file"' | sed 's/.*": *"\([^"]*\)".*/\1/')
  
  write_process_info "$name" "0" "$user" "$host" "$ssh_port" "$remote_csv" "$local_csv" "$log_file" "stopped"
  echo "‚úÖ Process '$name' stopped (config preserved)"
}

start_process() {
  local name="$1"
  local info=$(read_process_info "$name")
  
  if [[ -z "$info" ]]; then
    echo "‚ùå Process '$name' not found"
    exit 1
  fi
  
  local status=$(echo "$info" | grep '"status"' | sed 's/.*": *"\([^"]*\)".*/\1/')
  local pid=$(echo "$info" | grep '"pid"' | sed 's/.*: *\([0-9]*\).*/\1/')
  
  if [[ "$status" == "running" ]] && kill -0 "$pid" 2>/dev/null; then
    echo "‚ö†Ô∏è  Process '$name' is already running (PID: $pid)"
    exit 1
  fi
  
  # Extract saved configuration
  local user=$(echo "$info" | grep '"user"' | sed 's/.*": *"\([^"]*\)".*/\1/')
  local host=$(echo "$info" | grep '"host"' | sed 's/.*": *"\([^"]*\)".*/\1/')
  local ssh_port=$(echo "$info" | grep '"ssh_port"' | sed 's/.*: *\([0-9]*\).*/\1/')
  local remote_csv=$(echo "$info" | grep '"remote_csv"' | sed 's/.*": *"\([^"]*\)".*/\1/')
  local local_csv=$(echo "$info" | grep '"local_csv"' | sed 's/.*": *"\([^"]*\)".*/\1/')
  local log_file=$(echo "$info" | grep '"log_file"' | sed 's/.*": *"\([^"]*\)".*/\1/')
  
  echo "üöÄ Starting process '$name' with saved configuration"
  echo "üì° Target: $user@$host:$ssh_port"
  
  # Check for port conflicts
  if [[ -n "$remote_csv" ]]; then
    echo "üîç Checking local port availability for remote‚Üílocal forwards..."
    local conflicts=()
    while read -r port; do
      if lsof -i ":$port" -sTCP:LISTEN >/dev/null 2>&1; then
        conflicts+=("$port")
      fi
    done < <(_expand_ports "$remote_csv")
    
    if [[ ${#conflicts[@]} -gt 0 ]]; then
      echo "‚ö†Ô∏è  Warning: The following ports are already in use:"
      printf "   %s\n" "${conflicts[@]}"
      echo "   This may cause port forwarding conflicts."
      echo -n "   Continue anyway? [y/N] "
      read -r response
      if [[ ! "$response" =~ ^[Yy]$ ]]; then
        echo "‚ùå Aborted by user"
        exit 1
      fi
    fi
  fi
  
  # Build SSH command
  local cmd=(ssh -o ServerAliveInterval=30 -o ServerAliveCountMax=3 -o ExitOnForwardFailure=yes -o StrictHostKeyChecking=no -o LogLevel=ERROR -N -p "$ssh_port")
  
  # Add port forwards
  if [[ -n "$remote_csv" ]]; then
    while read -r port; do
      cmd+=(-L "${port}:localhost:${port}")
    done < <(_expand_ports "$remote_csv")
  fi
  
  if [[ -n "$local_csv" ]]; then
    while read -r port; do
      cmd+=(-R "${port}:localhost:${port}")
    done < <(_expand_ports "$local_csv")
  fi
  
  cmd+=("${user}@${host}")
  
  # Start the process in background
  echo "üîó Establishing SSH tunnel..."
  "${cmd[@]}" -o ConnectTimeout=8 >>"$log_file" 2>&1 &
  local new_pid=$!
  
  # Wait a moment to see if it starts successfully
  sleep 2
  if kill -0 "$new_pid" 2>/dev/null; then
    write_process_info "$name" "$new_pid" "$user" "$host" "$ssh_port" "$remote_csv" "$local_csv" "$log_file" "running"
    echo "‚úÖ Process '$name' started successfully (PID: $new_pid)"
  else
    echo "‚ùå Failed to start process '$name'"
    exit 1
  fi
}

remove_process() {
  local name_or_pid="$1"
  local info=$(read_process_info "$name_or_pid")
  
  if [[ -z "$info" ]]; then
    echo "‚ùå Process '$name_or_pid' not found"
    exit 1
  fi
  
  local name=$(echo "$info" | grep '"name"' | sed 's/.*": *"\([^"]*\)".*/\1/')
  local pid=$(echo "$info" | grep '"pid"' | sed 's/.*: *\([0-9]*\).*/\1/')
  local status=$(echo "$info" | grep '"status"' | sed 's/.*": *"\([^"]*\)".*/\1/')
  
  if [[ "$status" == "running" ]] && kill -0 "$pid" 2>/dev/null; then
    echo "‚ùå Cannot remove running process '$name'. Stop it first with: spf stop $name"
    exit 1
  fi
  
  rm -f "$SPF_DIR/${name}.json"
  local log_file=$(echo "$info" | grep '"log_file"' | sed 's/.*": *"\([^"]*\)".*/\1/')
  [[ -f "$log_file" ]] && rm -f "$log_file"
  echo "‚úÖ Process '$name' removed completely"
}

kill_all_processes() {
  cleanup_dead_processes
  local found=false
  
  for f in "$SPF_DIR"/*.json; do
    [[ -f "$f" ]] || continue
    found=true
    
    local name=$(grep '"name"' "$f" | sed 's/.*": *"\([^"]*\)".*/\1/')
    local pid=$(grep '"pid"' "$f" | sed 's/.*: *\([0-9]*\).*/\1/')
    
    if kill -0 "$pid" 2>/dev/null; then
      echo "üõë Stopping '$name' (PID: $pid)..."
      kill "$pid" 2>/dev/null || true
    fi
    
    rm -f "$f"
  done
  
  if [[ "$found" == "true" ]]; then
    echo "‚úÖ All SPF processes stopped"
  else
    echo "No SPF processes found"
  fi
}

show_logs() {
  local name_or_pid="$1"
  local follow="$2"
  local info=$(read_process_info "$name_or_pid")
  
  if [[ -z "$info" ]]; then
    echo "‚ùå Process '$name_or_pid' not found"
    exit 1
  fi
  
  local name=$(echo "$info" | grep '"name"' | sed 's/.*": *"\([^"]*\)".*/\1/')
  local log_file=$(echo "$info" | grep '"log_file"' | sed 's/.*": *"\([^"]*\)".*/\1/')
  
  if [[ ! -f "$log_file" ]]; then
    echo "‚ùå Log file not found for process '$name'"
    exit 1
  fi
  
  if [[ "$follow" == "true" ]]; then
    tail -f "$log_file"
  else
    cat "$log_file"
  fi
}

# error handling function
handle_ssh_error() {
  local exit_code=$1
  case $exit_code in
    1)   echo "‚ùå Generic SSH error - check your SSH configuration" ;;
    2)   echo "‚ùå SSH connection failed - protocol error" ;;
    65)  echo "‚ùå SSH host not allowed to connect" ;;
    66)  echo "‚ùå SSH connection failed - host unreachable" ;;
    67)  echo "‚ùå SSH connection failed - connection refused" ;;
    68)  echo "‚ùå SSH connection failed - host unknown" ;;
    69)  echo "‚ùå SSH connection failed - service unavailable" ;;
    70)  echo "‚ùå SSH connection failed - protocol not available" ;;
    73)  echo "‚ùå SSH connection failed - permission denied" ;;
    76)  echo "‚ùå SSH connection failed - protocol not supported" ;;
    255) echo "‚ùå SSH connection failed - connection terminated" ;;
    *)   echo "‚ùå SSH failed with exit code: $exit_code" ;;
  esac
}

# port availability check
check_local_ports() {
  local ports_to_check=()
  
  # Only check LOCAL BINDING ports (for -L forwards, not -R forwards)
  # -L forwards: remote‚Üílocal, so we bind to LOCAL ports (need to check conflicts)
  # -R forwards: local‚Üíremote, so we bind to REMOTE ports (no local conflicts)
  if [[ -n "$REMOTE_CSV" ]]; then
    echo "üîç Checking local port availability for remote‚Üílocal forwards..."
    while read -r port; do
      ports_to_check+=("$port")
    done < <(_expand_ports "$REMOTE_CSV")
  fi
  
  # early return if no ports to check
  if [[ ${#ports_to_check[@]} -eq 0 ]]; then
    return 0
  fi
  
  local conflicts=()
  for port in "${ports_to_check[@]}"; do
    if lsof -i ":$port" -sTCP:LISTEN >/dev/null 2>&1; then
      conflicts+=("$port")
    fi
  done
  
  if [[ ${#conflicts[@]} -gt 0 ]]; then
    echo "‚ö†Ô∏è  Warning: The following ports are already in use:"
    printf "   %s\n" "${conflicts[@]}"
    echo "   This may cause port forwarding conflicts."
    echo -n "   Continue anyway? [y/N] "
    read -r response
    if [[ ! "$response" =~ ^[Yy]$ ]]; then
      echo "‚ùå Aborted by user"
      exit 1
    fi
  fi
}

# connection test
test_ssh_connection() {
  echo "üîç Testing SSH connection to $USER@$HOST:$SSH_PORT..."
  
  local test_cmd=(ssh -o BatchMode=yes -o ConnectTimeout=10 -o StrictHostKeyChecking=no -p "$SSH_PORT")
  if (( ${#EXTRA_SSH[@]} )); then
    test_cmd+=("${EXTRA_SSH[@]}")
  fi
  test_cmd+=("$USER@$HOST" "echo 'SSH connection successful'")
  
  if "${test_cmd[@]}" >/dev/null 2>&1; then
    echo "‚úÖ SSH connection test passed"
    return 0
  else
    echo "‚ùå SSH connection test failed"
    return 1
  fi
}

# parse command
if [[ $# -gt 0 ]] && [[ "$1" != "-"* ]]; then
  case "$1" in
    ps) 
      trap - EXIT INT TERM  # Remove cleanup trap for command-only operations
      list_processes
      exit 0
      ;;
    start) 
      trap - EXIT INT TERM  # Remove cleanup trap for command-only operations
      shift
      if [[ $# -eq 0 ]]; then
        echo "Error: 'start' command requires a process name" >&2
        exit 1
      fi
      start_process "$1"
      exit 0
      ;;
    stop) 
      trap - EXIT INT TERM  # Remove cleanup trap for command-only operations
      shift
      if [[ $# -eq 0 ]]; then
        echo "Error: 'stop' command requires a process name or PID" >&2
        exit 1
      fi
      stop_process "$1"
      exit 0
      ;;
    rm) 
      trap - EXIT INT TERM  # Remove cleanup trap for command-only operations
      shift
      if [[ $# -eq 0 ]]; then
        echo "Error: 'rm' command requires a process name or PID" >&2
        exit 1
      fi
      remove_process "$1"
      exit 0
      ;;
    kill) 
      trap - EXIT INT TERM  # Remove cleanup trap for command-only operations
      kill_all_processes
      exit 0
      ;;
    logs) 
      trap - EXIT INT TERM  # Remove cleanup trap for command-only operations
      shift
      if [[ $# -eq 0 ]]; then
        echo "Error: 'logs' command requires a process name or PID" >&2
        exit 1
      fi
      target="$1"
      shift
      follow=false
      [[ $# -gt 0 && "$1" == "-f" ]] && follow=true
      show_logs "$target" "$follow"
      exit 0
      ;;
    *) 
      COMMAND="$1"
      shift
      ;;
  esac
fi

# parse flags
while [[ $# -gt 0 ]]; do
  case "$1" in
    -P) SSH_PORT="$2"; shift 2;;
    -L) REMOTE_CSV="$2"; shift 2;;
    -R) LOCAL_CSV="$2"; shift 2;;
    --name) CONNECTION_NAME="$2"; shift 2;;
    --retry) RETRIES="$2"; shift 2;;
    --delay) DELAY="$2"; shift 2;;
    -f) FOLLOW_LOGS=true; shift;;
    --) shift; EXTRA_SSH=("$@"); break;;
    -h|--help) usage; exit 0;;
    *)  echo "Unknown option: $1" >&2; usage; exit 1;;
  esac
done

# extract user@host from EXTRA_SSH
if (( ${#EXTRA_SSH[@]} == 0 )); then
  echo "Error: you must provide user@host after --" >&2
  usage
  exit 1
fi

if [[ ${EXTRA_SSH[0]} =~ ^([^@]+)@([^@]+)$ ]]; then
  USER="${BASH_REMATCH[1]}"
  HOST="${BASH_REMATCH[2]}"
  EXTRA_SSH=("${EXTRA_SSH[@]:1}")
else
  echo "Error: first argument after -- must be in user@host format" >&2
  usage
  exit 1
fi

# validate required
if [[ -z "$REMOTE_CSV" && -z "$LOCAL_CSV" ]]; then
  echo "Error: you must provide at least one of -L or -R" >&2
  usage
  exit 1
fi

# validate connection name
if [[ -n "$CONNECTION_NAME" ]]; then
  if [[ ! "$CONNECTION_NAME" =~ ^[a-zA-Z0-9_-]+$ ]]; then
    echo "Error: connection name must contain only alphanumeric characters, hyphens, and underscores" >&2
    exit 1
  fi
  
  if [[ -f "$SPF_DIR/${CONNECTION_NAME}.json" ]]; then
    local existing_pid=$(grep '"pid"' "$SPF_DIR/${CONNECTION_NAME}.json" | sed 's/.*: *\([0-9]*\).*/\1/')
    if kill -0 "$existing_pid" 2>/dev/null; then
      echo "Error: connection named '$CONNECTION_NAME' is already running (PID: $existing_pid)" >&2
      exit 1
    else
      # Clean up stale process file
      rm -f "$SPF_DIR/${CONNECTION_NAME}.json"
    fi
  fi
fi

# validate numeric arguments
if ! [[ "$RETRIES" =~ ^[0-9]+$ ]] || (( RETRIES < 0 )); then
  echo "Error: --retry must be a non-negative number" >&2
  exit 1
fi

if ! [[ "$DELAY" =~ ^[0-9]+$ ]] || (( DELAY < 0 )); then
  echo "Error: --delay must be a non-negative number" >&2
  exit 1
fi


# helper to format port ranges for summary
_format_port_summary() {
  local csv=$1
  IFS=',' read -ra parts <<< "$csv"
  for part in "${parts[@]}"; do
    echo "$part ‚Üí $part"
  done
}

if [[ -z "$CONNECTION_NAME" ]]; then
  echo "üöÄ Starting SSH Port Forwarder"
  echo "üì° Target: $USER@$HOST:$SSH_PORT"
else
  echo "üöÄ Starting SSH Port Forwarder '$CONNECTION_NAME' in background"
  echo "üì° Target: $USER@$HOST:$SSH_PORT"
fi

# check for port conflicts
check_local_ports

# print a concise summary
echo "=== Port forwarding summary ==="
if [[ -n "$REMOTE_CSV" ]]; then
  echo "üì• Remote ‚Üí Local forwards (listening on localhost):"
  while read -r line; do
    echo "   $line"
  done < <(_format_port_summary "$REMOTE_CSV")
fi
if [[ -n "$LOCAL_CSV" ]]; then
  echo "üì§ Local ‚Üí Remote forwards (available on remote):"
  while read -r line; do
    echo "   $line"
  done < <(_format_port_summary "$LOCAL_CSV")
fi

# test connection first
if ! test_ssh_connection; then
  echo "‚ùå Initial connection test failed. Attempting with retries..."
fi

# build ssh command
cmd=( ssh -o ServerAliveInterval=30 -o ServerAliveCountMax=3 -o ExitOnForwardFailure=yes -o StrictHostKeyChecking=no -o LogLevel=ERROR -N -p "$SSH_PORT" )
if (( ${#EXTRA_SSH[@]} )); then
  cmd+=( "${EXTRA_SSH[@]}" )
fi

# add remote‚Üílocal forwards
if [[ -n "$REMOTE_CSV" ]]; then
  while read -r port; do
    cmd+=( -L "${port}:localhost:${port}" )
  done < <(_expand_ports "$REMOTE_CSV")
fi

# add local‚Üíremote forwards
if [[ -n "$LOCAL_CSV" ]]; then
  while read -r port; do
    cmd+=( -R "${port}:localhost:${port}" )
  done < <(_expand_ports "$LOCAL_CSV")
fi

# target
cmd+=( "${USER}@${HOST}" )

# setup logging
if [[ -n "$CONNECTION_NAME" ]]; then
  LOG_FILE="$SPF_DIR/${CONNECTION_NAME}.log"
  exec > >(tee -a "$LOG_FILE")
  exec 2>&1
fi

# connection loop with retries
attempt=1
while (( attempt <= RETRIES + 1 )); do
  if (( attempt > 1 )); then
    echo "üîÑ Attempt $attempt/$(( RETRIES + 1 )) (waiting ${DELAY}s...)"
    sleep "$DELAY"
  else
    echo "üîó Establishing SSH tunnel..."
  fi
  
  # start SSH tunnel with shorter timeout
  ssh_log=$(mktemp)
  if [[ -n "$CONNECTION_NAME" ]]; then
    # For named connections, log to the connection's log file
    "${cmd[@]}" -o ConnectTimeout=8 2>>"$LOG_FILE" &
  else
    "${cmd[@]}" -o ConnectTimeout=8 2>"$ssh_log" &
  fi
  SSH_PID=$!
  
  # wait for initial connection attempt
  waited=0
  max_wait=10
  connected=false
  
  while (( waited < max_wait )) && kill -0 "$SSH_PID" 2>/dev/null; do
    sleep 1
    ((waited++))
    
    # After a few seconds, test if we can actually use a forwarded port
    if (( waited >= 4 )) && [[ -n "$REMOTE_CSV" ]]; then
      # Try to test one of the forwarded ports
      first_port=$(echo "$REMOTE_CSV" | cut -d',' -f1 | cut -d'-' -f1)
      if nc -z localhost "$first_port" 2>/dev/null; then
        connected=true
        break
      fi
    fi
    
    # Check for obvious failures in the log
    if grep -q "Connection refused\|Host is down\|Operation timed out\|Permission denied\|Could not resolve hostname\|No route to host" "$ssh_log" 2>/dev/null; then
      break
    fi
  done
  
  # If SSH is still running but we haven't confirmed connection, kill it
  if kill -0 "$SSH_PID" 2>/dev/null && [[ "$connected" == "false" ]]; then
    # Give it one more second for edge cases
    sleep 1
    if [[ -n "$REMOTE_CSV" ]]; then
      first_port=$(echo "$REMOTE_CSV" | cut -d',' -f1 | cut -d'-' -f1)
      if nc -z localhost "$first_port" 2>/dev/null; then
        connected=true
      fi
    fi
    
    # If still not connected, kill the hanging process
    if [[ "$connected" == "false" ]]; then
      kill "$SSH_PID" 2>/dev/null || true
      wait "$SSH_PID" 2>/dev/null || true
      SSH_PID=""
    fi
  fi
  
  # Display error messages if connection failed
  if [[ "$connected" == "false" ]] && [[ -s "$ssh_log" ]]; then
    grep -E "ssh:|connect to host|Connection|Host|Operation timed out" "$ssh_log" 2>/dev/null | tail -1
  fi
  rm -f "$ssh_log" 2>/dev/null
  
  if [[ "$connected" == "true" ]] && [[ -n "$SSH_PID" ]] && kill -0 "$SSH_PID" 2>/dev/null; then
    echo "‚úÖ SSH tunnel established successfully (PID: $SSH_PID)"
    
    # Write process info for named connections
    if [[ -n "$CONNECTION_NAME" ]]; then
      write_process_info "$CONNECTION_NAME" "$SSH_PID" "$USER" "$HOST" "$SSH_PORT" "$REMOTE_CSV" "$LOCAL_CSV" "$LOG_FILE" "running"
      echo "üìÅ Process saved as '$CONNECTION_NAME'"
      echo "üìù View logs: spf logs $CONNECTION_NAME"
      echo "üõë Stop process: spf rm $CONNECTION_NAME"
      
      # For named connections, run in background and exit
      trap - EXIT INT TERM  # Remove traps to avoid cleanup on exit
      exit 0
    else
      echo "üéØ Press Ctrl+C to terminate the tunnel"
    fi
    
    # monitor the tunnel (only for unnamed/attached connections)
    while kill -0 "$SSH_PID" 2>/dev/null; do
      sleep 1
    done
    
    # if we get here, the tunnel died
    wait "$SSH_PID" 2>/dev/null || tunnel_exit=$?
    echo "‚ö†Ô∏è  SSH tunnel terminated unexpectedly"
    handle_ssh_error "${tunnel_exit:-1}"
    
    if (( attempt <= RETRIES )); then
      echo "üîÑ Attempting to reconnect..."
      SSH_PID=""
      (( attempt++ ))
      continue
    else
      echo "‚ùå Maximum retries exceeded"
      exit 1
    fi
  else
    # tunnel failed to start
    wait "$SSH_PID" 2>/dev/null || tunnel_exit=$?
    handle_ssh_error "${tunnel_exit:-1}"
    SSH_PID=""
    
    if (( attempt <= RETRIES )); then
      (( attempt++ ))
      continue
    else
      echo "‚ùå Failed to establish SSH tunnel after $(( RETRIES + 1 )) attempts"
      exit 1
    fi
  fi
done
