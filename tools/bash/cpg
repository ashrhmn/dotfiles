#!/usr/bin/env bash

set -euo pipefail

# Script: cpg (Copy Git)
# Description: Copy git repository contents from source to target directories
# Author: Generated for dotfiles management

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m' # No Color

# Script configuration
readonly SCRIPT_NAME="$(basename "$0")"
readonly SCRIPT_VERSION="1.0.0"

# Global flags
PRUNE_TARGETS=false
VERBOSE=false
DRY_RUN=false
RESPECT_GITIGNORE=false
IGNORE_PATTERNS=()

# Function to print colored output
print_color() {
    local color="$1"
    local message="$2"
    echo -e "${color}${message}${NC}"
}

# Function to print error messages
error() {
    print_color "$RED" "‚ùå Error: $1" >&2
}

# Function to print success messages
success() {
    print_color "$GREEN" "‚úÖ $1"
}

# Function to print warning messages
warn() {
    print_color "$YELLOW" "‚ö†Ô∏è  Warning: $1"
}

# Function to print info messages
info() {
    print_color "$BLUE" "‚ÑπÔ∏è  $1"
}

# Function to print verbose messages
verbose() {
    if [[ "$VERBOSE" == true ]]; then
        print_color "$BLUE" "üîç $1"
    fi
}

# Function to show usage information
show_usage() {
    cat << EOF
${SCRIPT_NAME} v${SCRIPT_VERSION} - Copy Git Repository Contents

USAGE:
    ${SCRIPT_NAME} [OPTIONS] <src_dir> <target_dir1> [target_dir2 ...]

DESCRIPTION:
    Copy all git repository contents from source directory to one or more target directories.
    Both source and target directories must be git repositories.

ARGUMENTS:
    src_dir         Source git repository directory
    target_dir(s)   One or more target git repository directories

OPTIONS:
    -p, --prune     Prune target directories (remove all files except .git) before copying
    -g, --gitignore Respect .gitignore files in source directory
    -i, --ignore    Ignore pattern (can be used multiple times, e.g., -i "node_modules" -i ".env*")
    -v, --verbose   Enable verbose output
    -n, --dry-run   Show what would be done without actually doing it
    -h, --help      Show this help message
    -V, --version   Show version information

EXAMPLES:
    # Copy from repo1 to repo2
    ${SCRIPT_NAME} /path/to/repo1 /path/to/repo2

    # Copy from repo1 to multiple targets
    ${SCRIPT_NAME} /path/to/repo1 /path/to/repo2 /path/to/repo3

    # Prune targets before copying
    ${SCRIPT_NAME} --prune /path/to/repo1 /path/to/repo2

    # Ignore specific patterns
    ${SCRIPT_NAME} --ignore "node_modules" --ignore ".env*" /path/to/repo1 /path/to/repo2

    # Respect .gitignore files
    ${SCRIPT_NAME} --gitignore /path/to/repo1 /path/to/repo2

    # Combine gitignore with custom patterns
    ${SCRIPT_NAME} --gitignore --ignore "*.tmp" /path/to/repo1 /path/to/repo2

    # Dry run to see what would happen
    ${SCRIPT_NAME} --dry-run --verbose /path/to/repo1 /path/to/repo2

NOTES:
    - All directories (source and targets) must be git repositories
    - The .git directory is always preserved in targets when using --prune
    - Hidden files and directories (except .git) are included in the copy operation
    - File permissions and timestamps are preserved during copy
    - Ignore patterns support shell glob patterns (*, ?, [abc], etc.)
    - Use multiple --ignore flags for multiple patterns
    - --gitignore respects .gitignore, .git/info/exclude, and global gitignore files
    - --gitignore and --ignore can be combined for maximum control

EOF
}

# Function to show version information
show_version() {
    echo "${SCRIPT_NAME} version ${SCRIPT_VERSION}"
}

# Function to check if directory is a git repository
is_git_repo() {
    local dir="$1"
    [[ -d "$dir/.git" ]] || git -C "$dir" rev-parse --git-dir >/dev/null 2>&1
}

# Function to validate directories
validate_directories() {
    local src_dir="$1"
    shift
    local target_dirs=("$@")

    # Check if source directory exists and is a git repo
    if [[ ! -d "$src_dir" ]]; then
        error "Source directory does not exist: $src_dir"
        return 1
    fi

    if ! is_git_repo "$src_dir"; then
        error "Source directory is not a git repository: $src_dir"
        return 1
    fi

    verbose "Source directory validated: $src_dir"

    # Check each target directory
    for target_dir in "${target_dirs[@]}"; do
        if [[ ! -d "$target_dir" ]]; then
            error "Target directory does not exist: $target_dir"
            return 1
        fi

        if ! is_git_repo "$target_dir"; then
            error "Target directory is not a git repository: $target_dir"
            return 1
        fi

        verbose "Target directory validated: $target_dir"
    done

    success "All directories validated as git repositories"
    return 0
}

# Function to prune target directory (keep only .git)
prune_target() {
    local target_dir="$1"
    
    verbose "Pruning target directory: $target_dir"
    
    if [[ "$DRY_RUN" == true ]]; then
        info "DRY RUN: Would prune all files in $target_dir except .git/"
        return 0
    fi

    # Find and remove all files and directories except .git
    find "$target_dir" -mindepth 1 -maxdepth 1 ! -name '.git' -exec rm -rf {} + 2>/dev/null || true
    
    success "Pruned target directory: $target_dir"
}

# Function to copy git repository contents
copy_git_contents() {
    local src_dir="$1"
    local target_dir="$2"
    
    verbose "Copying from $src_dir to $target_dir"
    
    if [[ "$RESPECT_GITIGNORE" == true ]]; then
        verbose "Respecting .gitignore files"
    fi
    
    if [[ "${#IGNORE_PATTERNS[@]}" -gt 0 ]]; then
        verbose "Ignoring patterns: ${IGNORE_PATTERNS[*]}"
    fi
    
    if [[ "$DRY_RUN" == true ]]; then
        info "DRY RUN: Would copy contents from $src_dir to $target_dir"
        if [[ "$RESPECT_GITIGNORE" == true ]]; then
            info "DRY RUN: Would respect .gitignore files"
        fi
        if [[ "${#IGNORE_PATTERNS[@]}" -gt 0 ]]; then
            info "DRY RUN: Would ignore patterns: ${IGNORE_PATTERNS[*]}"
        fi
        return 0
    fi

    # Copy all files and directories except .git (to avoid conflicts)
    # Use rsync for better handling of permissions and symlinks
    if command -v rsync >/dev/null 2>&1; then
        if [[ "$RESPECT_GITIGNORE" == true ]]; then
            # Use git ls-files to get files that should be copied (respecting gitignore)
            verbose "Using git ls-files for gitignore support with rsync"
            
            # Get list of files from git, excluding ignored ones
            local git_files
            if git_files=$(cd "$src_dir" && git ls-files --cached --others --exclude-standard 2>/dev/null); then
                # Create a temporary file list for rsync
                local temp_filelist
                temp_filelist=$(mktemp)
                
                # Filter git files through ignore patterns and write to temp file
                while IFS= read -r file; do
                    if [[ -n "$file" ]]; then
                        local should_skip=false
                        
                        # Check against manual ignore patterns
                        if [[ "${#IGNORE_PATTERNS[@]}" -gt 0 ]]; then
                            for pattern in "${IGNORE_PATTERNS[@]}"; do
                                if [[ "$file" == $pattern ]] || [[ "$file" == *"$pattern"* ]]; then
                                    should_skip=true
                                    break
                                fi
                            done
                        fi
                        
                        if [[ "$should_skip" == false ]]; then
                            echo "$file" >> "$temp_filelist"
                        fi
                    fi
                done <<< "$git_files"
                
                # Use rsync with the file list
                rsync -av --files-from="$temp_filelist" "$src_dir" "$target_dir/"
                
                # Clean up temp file
                rm -f "$temp_filelist"
            else
                warn "Failed to get git file list, falling back to regular copy"
                RESPECT_GITIGNORE=false
            fi
        fi
        
        if [[ "$RESPECT_GITIGNORE" == false ]]; then
            # Regular rsync with exclude patterns
            local rsync_args=(-av --exclude='.git')
            
            # Add ignore patterns to rsync excludes
            if [[ "${#IGNORE_PATTERNS[@]}" -gt 0 ]]; then
                for pattern in "${IGNORE_PATTERNS[@]}"; do
                    rsync_args+=(--exclude="$pattern")
                done
            fi
            
            rsync "${rsync_args[@]}" "$src_dir/" "$target_dir/"
        fi
    else
        # Fallback to cp if rsync is not available
        if [[ "$RESPECT_GITIGNORE" == true ]]; then
            # Use git ls-files to get files that should be copied (respecting gitignore)
            verbose "Using git ls-files for gitignore support (cp fallback)"
            
            # Get list of files from git, excluding ignored ones
            local git_files
            if ! git_files=$(cd "$src_dir" && git ls-files --cached --others --exclude-standard 2>/dev/null); then
                warn "Failed to get git file list, falling back to regular copy"
                RESPECT_GITIGNORE=false
            fi
        fi
        
        if [[ "$RESPECT_GITIGNORE" == true && -n "$git_files" ]]; then
            # Copy only files that git would track
            while IFS= read -r file; do
                if [[ -n "$file" ]]; then
                    local should_skip=false
                    
                    # Check against manual ignore patterns
                    if [[ "${#IGNORE_PATTERNS[@]}" -gt 0 ]]; then
                        for pattern in "${IGNORE_PATTERNS[@]}"; do
                            if [[ "$file" == $pattern ]]; then
                                should_skip=true
                                break
                            fi
                        done
                    fi
                    
                    if [[ "$should_skip" == false ]]; then
                        local src_file="$src_dir/$file"
                        local target_file="$target_dir/$file"
                        
                        # Create directory structure if needed
                        mkdir -p "$(dirname "$target_file")"
                        
                        # Copy the file
                        cp -p "$src_file" "$target_file" 2>/dev/null || warn "Failed to copy: $file"
                    fi
                fi
            done <<< "$git_files"
        else
            # Regular find-based copy with ignore patterns
            local find_cmd="find '$src_dir' -mindepth 1 -maxdepth 1 ! -name '.git'"
            
            # Add ignore patterns to find command
            if [[ "${#IGNORE_PATTERNS[@]}" -gt 0 ]]; then
                for pattern in "${IGNORE_PATTERNS[@]}"; do
                    find_cmd+=" ! -name '$pattern'"
                done
            fi
            
            find_cmd+=" -exec cp -R {} '$target_dir/' \;"
            
            eval "$find_cmd"
        fi
    fi
    
    success "Copied contents from $src_dir to $target_dir"
}

# Function to handle cleanup on script exit
cleanup() {
    local exit_code=$?
    if [[ $exit_code -ne 0 ]]; then
        error "Script exited with error code: $exit_code"
    fi
}

# Set up cleanup trap
trap cleanup EXIT

# Main function
main() {
    local args=()
    
    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -p|--prune)
                PRUNE_TARGETS=true
                shift
                ;;
            -g|--gitignore)
                RESPECT_GITIGNORE=true
                shift
                ;;
            -i|--ignore)
                if [[ -z "$2" ]]; then
                    error "Option $1 requires an argument"
                    exit 1
                fi
                IGNORE_PATTERNS+=("$2")
                shift 2
                ;;
            -v|--verbose)
                VERBOSE=true
                shift
                ;;
            -n|--dry-run)
                DRY_RUN=true
                shift
                ;;
            -h|--help)
                show_usage
                exit 0
                ;;
            -V|--version)
                show_version
                exit 0
                ;;
            -*)
                error "Unknown option: $1"
                echo
                show_usage
                exit 1
                ;;
            *)
                args+=("$1")
                shift
                ;;
        esac
    done

    # Check if no arguments provided
    if [[ ${#args[@]} -eq 0 ]]; then
        show_usage
        exit 0
    fi

    # Check minimum number of arguments
    if [[ ${#args[@]} -lt 2 ]]; then
        error "At least 2 arguments required: source directory and target directory"
        echo
        show_usage
        exit 1
    fi

    # Extract source and target directories
    local src_dir="${args[0]}"
    local target_dirs=("${args[@]:1}")

    info "Starting git repository copy operation"
    verbose "Source: $src_dir"
    verbose "Targets: ${target_dirs[*]}"
    verbose "Prune targets: $PRUNE_TARGETS"
    verbose "Respect gitignore: $RESPECT_GITIGNORE"
    verbose "Dry run: $DRY_RUN"
    if [[ "${#IGNORE_PATTERNS[@]}" -gt 0 ]]; then
        verbose "Ignore patterns: ${IGNORE_PATTERNS[*]}"
    fi

    # Validate all directories
    if ! validate_directories "$src_dir" "${target_dirs[@]}"; then
        exit 1
    fi

    # Process each target directory
    for target_dir in "${target_dirs[@]}"; do
        info "Processing target: $target_dir"
        
        # Prune target if requested
        if [[ "$PRUNE_TARGETS" == true ]]; then
            prune_target "$target_dir"
        fi
        
        # Copy contents
        copy_git_contents "$src_dir" "$target_dir"
    done

    success "Git repository copy operation completed successfully"
    
    if [[ "$DRY_RUN" == true ]]; then
        info "This was a dry run. No actual changes were made."
    fi
}

# Run main function with all arguments
main "$@"